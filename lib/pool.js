var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Promise = require('bluebird');
var dequeue_1 = require('./dequeue');
var helper = require('./helper');
var Err = require('./error');
var events = require('events');
var Pool = (function (_super) {
    __extends(Pool, _super);
    function Pool(r, options) {
        var _this = this;
        _super.call(this);
        this._r = r;
        if (!helper.isPlainObject(options))
            options = {};
        this.options = {};
        this.options.max = options.max || 1000; // 4000 is about the maximum the kernel can take
        var buffer = (typeof options.buffer === 'number') ? options.buffer : 50;
        this.options.buffer = (buffer < this.options.max) ? buffer : this.options.max;
        this.options.timeoutError = options.timeoutError || 1000; // How long should we wait before recreating a connection that failed?
        this.options.timeoutGb = options.timeoutGb || 60 * 60 * 1000; // Default timeout for TCP connection is 2 hours on Linux, we time out after one hour.
        this.options.maxExponent = options.maxExponent || 6; // Maximum timeout is 2^maxExponent*timeoutError
        this.options.silent = options.silent || false;
        this.options.connection = {
            host: options.host || this._r._host,
            port: options.port || this._r._port,
            db: options.db || this._r._db,
            timeout: options.timeout || this._r._timeoutConnect,
            authKey: options.authKey || this._r._authKey,
            cursor: options.cursor || false,
            stream: options.stream || false,
            ssl: options.ssl || false
        };
        this._log = options._log;
        this._pool = new dequeue_1.Dequeue(this.options.buffer + 1);
        this._draining = null;
        this._localhostToDrain = 0; // number of connections to "localhost" to remove
        this._connectionToReplace = 0; // number of connections to "localhost" to remove
        this._numConnections = 0;
        this._openingConnections = 0; // Number of connections being opened
        this._consecutiveFails = 0; // In slow growth, the number of consecutive failures to open a connection
        this._slowGrowth = false; // Opening one connection at a time
        this._slowlyGrowing = false; // The next connection to be returned is one opened in slowGrowth mode
        this._extraConnections = 0; // Number of extra connections being opened that we should eventually close
        this._empty = true;
        // So we can let the pool master bind listeners
        setTimeout(function () {
            for (var i = 0; i < _this.options.buffer; i++) {
                if (_this.getLength() < _this.options.max) {
                    _this.createConnection();
                }
            }
        }, 0);
        this.id = Math.floor(Math.random() * 100000);
        this._log('Creating a pool connected to ' + this.getAddress());
    }
    Pool.prototype.getAddress = function () {
        return this.options.connection.host + ':' + this.options.connection.port;
    };
    Pool.prototype.drain = function () {
        var _this = this;
        var self = this;
        this._log('Draining the pool connected to ' + this.getAddress());
        this.emit('draining');
        var p = new Promise(function (resolve, reject) {
            var connection = _this._pool.pop();
            _this.emit('available-size', _this._pool.getLength());
            _this.emit('available-size-diff', -1);
            while (connection) {
                connection.close();
                clearTimeout(connection.timeout);
                connection = _this._pool.pop();
            }
            if (_this.timeoutReconnect !== undefined) {
                clearTimeout(_this.timeoutReconnect);
                _this.timeoutReconnect = null;
            }
            if (_this.getLength() === 0) {
                resolve();
            }
            else {
                _this._draining = {
                    resolve: resolve,
                    reject: reject
                };
            }
        });
        return p;
    };
    Pool.prototype.drainLocalhost = function () {
        var _this = this;
        var self = this;
        // All the connections are to localhost, let's create new ones (not to localhost)
        this._connectionToReplace = this._numConnections;
        ;
        for (var i = 0, numConnections = this._numConnections; i < numConnections; i++) {
            this.createConnection().finally(function () {
                _this._localhostToDrain++;
                _this._connectionToReplace--;
                if ((_this._connectionToReplace === 0) && (_this._localhostToDrain > 0)) {
                    var len = _this._pool.getLength();
                    for (var j = 0; j < len; j++) {
                        if (_this._localhostToDrain === 0) {
                            break;
                        }
                        var _connection = _this._pool.shift();
                        if (helper.localhostAliases.hasOwnProperty(_connection.host)) {
                            _this._localhostToDrain--;
                            _connection.close();
                            clearTimeout(_connection.timeout);
                        }
                        else {
                            _this._pool.push(_connection);
                        }
                    }
                }
            });
        }
    };
    Pool.prototype.setOptions = function (options) {
        if (helper.isPlainObject(options)) {
            for (var key in options) {
                this.options[key] = options[key];
            }
        }
        return this.options;
    };
    Pool.prototype.getAvailableLength = function () {
        return this._pool.getLength();
    };
    Pool.prototype.getLength = function () {
        return this._numConnections;
    };
    Pool.prototype._expandBuffer = function () {
        if ((this._draining === null) &&
            (this._pool.getLength() < this.options.buffer + this._localhostToDrain) &&
            (this._numConnections < this.options.max + this._localhostToDrain)) {
            this.createConnection();
        }
    };
    Pool.prototype._aggressivelyExpandBuffer = function () {
        for (var i = 0; i < this.options.buffer; i++) {
            this._expandBuffer();
        }
    };
    Pool.prototype.createConnection = function () {
        var _this = this;
        var self = this;
        this._increaseNumConnections();
        this._openingConnections++;
        this.emit('creating-connection', self);
        if (this._draining) {
            return; // Do not create a new connection if we are draining the pool.
        }
        return this._r.connect(this.options.connection).then(function (connection) {
            _this.emit('created-connection', _this);
            _this._openingConnections--;
            if ((_this._slowlyGrowing === false) && (_this._slowGrowth === true) && (_this._openingConnections === 0)) {
                _this._consecutiveFails++;
                _this._slowlyGrowing = true;
                _this.timeoutReconnect = setTimeout(function () {
                    _this.createConnection();
                    //this._expandBuffer();
                }, (1 << Math.min(_this.options.maxExponent, _this._consecutiveFails)) * _this.options.timeoutError);
            }
            else if ((_this._slowlyGrowing === true) && (_this._slowGrowth === true) && (_this._consecutiveFails > 0)) {
                _this._log('Exiting slow growth mode');
                _this._consecutiveFails = 0;
                _this._slowGrowth = false;
                _this._slowlyGrowing = false;
                _this._aggressivelyExpandBuffer();
            }
            connection.on('error', function (e) {
                // We are going to close connection, but we don't want another process to use it before
                // So we remove it from the pool now (if it's inside)
                _this._log('Error emitted by a connection: ' + JSON.stringify(error));
                for (var i = 0; i < _this.getAvailableLength(); i++) {
                    if (_this._pool.get(i) === _this) {
                        _this._pool.delete(i);
                        _this.emit('available-size', _this._pool.getLength());
                        _this.emit('available-size-diff', -1);
                        break;
                    }
                }
                // We want to make sure that it's not going to try to reconnect
                clearTimeout(connection.timeout);
                // Not sure what happened here, so let's be safe and close this connection.
                connection.close().then(function () {
                    _this._expandBuffer();
                }).error(function (e) {
                    // We failed to close this connection, but we removed it from the pool... so err, let's just ignore that.
                    _this._expandBuffer();
                });
                clearTimeout(connection.timeout);
            });
            connection.on('end', function (e) {
                // The connection was closed by the server, let's clean...
                for (var i = 0; i < _this.getAvailableLength(); i++) {
                    if (_this._pool.get(i) === _this) {
                        _this._pool.delete(i);
                        _this.emit('available-size', _this._pool.getLength());
                        _this.emit('available-size-diff', -1);
                        break;
                    }
                }
                clearTimeout(connection.timeout);
                _this._decreaseNumConnections();
                _this._expandBuffer();
            });
            connection.on('timeout', function () {
                for (var i = 0; i < _this.getAvailableLength(); i++) {
                    if (_this._pool.get(i) === _this) {
                        _this._pool.delete(i);
                        _this.emit('available-size', _this._pool.getLength());
                        _this.emit('available-size-diff', -1);
                        break;
                    }
                }
                clearTimeout(connection.timeout);
                _this._decreaseNumConnections();
                _this._expandBuffer();
            });
            connection.on('release', function () {
                if (this._isOpen())
                    self.putConnection(this);
            });
            _this.putConnection(connection);
            return null;
        }).error(function (error) {
            // We failed to create a connection, we are now going to create connections one by one
            _this._openingConnections--;
            _this._decreaseNumConnections();
            _this._slowGrowth = true;
            if (_this._slowlyGrowing === false) {
                _this._log('Entering slow growth mode');
            }
            _this._slowlyGrowing = true;
            // Log an error
            _this._log('Fail to create a new connection for the connection pool. Error:' + JSON.stringify(error));
            if (_this._openingConnections === 0) {
                _this._consecutiveFails++;
                _this.timeoutReconnect = setTimeout(function () {
                    //this._expandBuffer();
                    _this.createConnection();
                }, (1 << Math.min(_this.options.maxExponent, _this._consecutiveFails)) * _this.options.timeoutError);
            }
        });
    };
    Pool.prototype.putConnection = function (connection) {
        var _this = this;
        var self = this;
        if (this._empty === true) {
            this._empty = false;
            // We emit not-empty only we have at least one opened connection
            this.emit('not-empty');
        }
        if ((this._localhostToDrain > 0) && (helper.localhostAliases.hasOwnProperty(connection.host))) {
            this._localhostToDrain--;
            connection.close();
            clearTimeout(connection.timeout);
            this.createConnection();
        }
        else if (this._draining !== null) {
            connection.close();
            clearTimeout(connection.timeout);
            if (this.getLength() === 0) {
                this._draining.resolve();
            }
        }
        else if (this._extraConnections > 0) {
            this._extraConnections--;
            connection.close().error(function (error) {
                _this._log('Fail to properly close a connection. Error:' + JSON.stringify(error));
            });
            clearTimeout(connection.timeout);
        }
        else {
            this._pool.push(connection);
            this.emit('available-size', this._pool.getLength());
            this.emit('available-size-diff', 1);
            this.emit('new-connection', connection);
            clearTimeout(connection.timeout);
            var timeoutCb = function () {
                if (_this._pool.get(0) === connection) {
                    if (_this._pool.getLength() > _this.options.buffer) {
                        _this._pool.shift().close();
                        _this.emit('available-size', _this._pool.getLength());
                        _this.emit('available-size-diff', -1);
                    }
                    else {
                        connection.timeout = setTimeout(timeoutCb, _this.options.timeoutGb);
                    }
                }
                else {
                    // This should technically never happens
                    connection.timeout = setTimeout(timeoutCb, _this.options.timeoutGb);
                }
            };
            connection.timeout = setTimeout(timeoutCb, this.options.timeoutGb);
        }
    };
    Pool.prototype._increaseNumConnections = function () {
        this._numConnections++;
        this.emit('size', this._numConnections);
        this.emit('size-diff', 1);
    };
    Pool.prototype._decreaseNumConnections = function () {
        this._numConnections--;
        this.emit('size', this._numConnections);
        this.emit('size-diff', -1);
        if ((this._draining !== null) && (this._numConnections === 0)) {
            this._draining.resolve();
        }
        // We do not check for this._empty === false because we want to emit empty if the pool
        // tries to connect to an unavailable server (such that the master can remove it from the
        // healthy pool
        if (this._numConnections === 0) {
            this._empty = true;
            this.emit('empty');
        }
    };
    Pool.prototype.getConnection = function () {
        var _this = this;
        var p = new Promise(function (resolve, reject) {
            if (_this._draining !== null) {
                return reject(new Err.ReqlDriverError('The pool is being drained').setOperational());
            }
            var connection = _this._pool.pop();
            _this.emit('available-size', _this._pool.getLength());
            _this.emit('available-size-diff', -1);
            if (connection) {
                clearTimeout(connection.timeout);
                resolve(connection);
            }
            else {
                if ((_this._numConnections === 0) && (_this._slowGrowth === true)) {
                    // If the server is down we do not want to buffer the queries
                    return reject(new Err.ReqlDriverError('The pool does not have any opened connections and failed to open a new one').setOperational());
                }
            }
            if (_this._slowGrowth === false) {
                _this._expandBuffer();
            }
        });
        return p;
    };
    return Pool;
})(events.EventEmitter);
exports.Pool = Pool;
/*
 * Events:
 *  - draining // when `drain` is called
 *  - queueing(size of the queue) // the number of queries being beffered changed
 *  - size(number of connections) // the size of the pool changed
 *  - available-size(available size) // the number of AVAILABLE conncetions of the pool changed
 */ 
//# sourceMappingURL=data:application/json;base64,
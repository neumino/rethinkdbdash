export declare class Term {
    _frames: any;
    _error: any;
    _query: any;
    _r: any;
    _nestingLevel: any;
    _arrayLimit: any;
    constructor(r: any, value?: any, error?: any);
    indexStatus(): Term;
    indexDrop(name: any): Term;
    indexCreate(name: any, fn: any, options: any): Term;
    indexList(): Term;
    tableList(): Term;
    tableDrop(table: any): Term;
    tableCreate(table: any, options: any): Term;
    dbList(): Term;
    dbDrop(db: any): Term;
    dbCreate(db: any): Term;
    _toTransformStream(connection: any, options: any): any;
    _toWritableStream(connection: any, options: any): any;
    _toReadableStream(connection: any, options: any): any;
    toStream(connection: any, options: any): any;
    run(connection?: any, options?: any, callback?: any): any;
    setIntersection(other: any): Term;
    setUnion(other: any): Term;
    setInsert(other: any): Term;
    difference(other: any): Term;
    prepend(value: any): Term;
    append(value: any): Term;
    literal(obj?: any): Term;
    merge(arg: any): Term;
    without(): Term;
    pluck(): Term;
    row(): Term;
    max(field: any): Term;
    min(field: any): Term;
    avg(field: any): Term;
    sum(field: any): Term;
    contains(): Term;
    ungroup(): Term;
    split(separator: any, max: any): Term;
    group(): Term;
    distinct(options: any): Term;
    count(filter: any): Term;
    reduce(func: any): Term;
    sample(size: any): Term;
    union(): Term;
    isEmpty(): Term;
    offsetsOf(predicate: any): Term;
    nth(value: any): Term;
    slice(start: any, end: any, options: any): Term;
    limit(value: any): Term;
    skip(value: any): Term;
    asc(field: any): Term;
    desc(field: any): Term;
    orderBy(): Term;
    concatMap(transformation: any): Term;
    withFields(): Term;
    map(): Term;
    zip(): Term;
    eqJoin(rightKey: any, sequence: any, options: any): Term;
    outerJoin(sequence: any, predicate: any): Term;
    innerJoin(sequence: any, predicate: any): Term;
    filter(filter: any, options: any): Term;
    maxval(): Term;
    minval(): Term;
    between(start: any, end: any, options: any): Term;
    getAll(): Term;
    get(primaryKey: any): Term;
    table(table: any, options: any): Term;
    db(db: any): Term;
    sync(): Term;
    delete(options: any): Term;
    replace(newValue: any, options: any): Term;
    update(newValue: any, options: any): Term;
    insert(documents: any, options: any): Term;
    changes(options: any): Term;
    indexRename(oldName: any, newName: any, options: any): Term;
    indexWait(): Term;
    indexesOf: any;
    default(expression: any): Term;
    forEach(func: any): Term;
    branch(trueBranch: any, falseBranch: any): Term;
    do(): Term;
    args(): Term;
    december(): Term;
    november(): Term;
    october(): Term;
    september(): Term;
    august(): Term;
    july(): Term;
    june(): Term;
    may(): Term;
    april(): Term;
    march(): Term;
    february(): Term;
    january(): Term;
    sunday(): Term;
    saturday(): Term;
    friday(): Term;
    thursday(): Term;
    wednesday(): Term;
    tuesday(): Term;
    monday(): Term;
    toEpochTime(): Term;
    toISO8601(): Term;
    seconds(): Term;
    minutes(): Term;
    hours(): Term;
    dayOfWeek(): Term;
    dayOfYear(): Term;
    day(): Term;
    month(): Term;
    year(): Term;
    timeOfDay(): Term;
    date(): Term;
    during(left: any, right: any, options: any): Term;
    timezone(): Term;
    inTimezone(timezone: any): Term;
    ISO8601(isoTime: any, options?: any): Term;
    epochTime(epochTime: any): Term;
    time(): Term;
    now(): Term;
    round(): Term;
    ceil(): Term;
    floor(): Term;
    random(): Term;
    not(): Term;
    le(other: any): Term;
    lt(other: any): Term;
    ge(other: any): Term;
    gt(other: any): Term;
    ne(): Term;
    eq(): Term;
    or(): Term;
    and(): Term;
    mod(b: any): Term;
    div(): Term;
    mul(): Term;
    sub(): Term;
    add(): Term;
    downcase(regex: any): Term;
    upcase(regex: any): Term;
    match(regex: any): Term;
    object(): Term;
    values(): Term;
    keys(): Term;
    changeAt(index: any, value: any): Term;
    deleteAt(start: any, end: any): Term;
    spliceAt(index: any, array: any): Term;
    insertAt(index: any, value: any): Term;
    hasFields(): Term;
    bracket(field: any): Term;
    getField(field: any): Term;
    setDifference(other: any): Term;
    getIntersecting(geometry: any, options: any): Term;
    toGeojson(): Term;
    geojson(geometry: any): Term;
    fill(): Term;
    distance(geometry: any, options: any): Term;
    circle(center: any, radius: any, options?: any): Term;
    uuid(str: any): Term;
    http(url: any, options: any): Term;
    json(json: any): Term;
    info(): Term;
    typeOf(): Term;
    coerceTo(type: any): Term;
    js(arg: any, options: any): Term;
    binary(bin: any): any;
    expr(expression: any, nestingLevel?: any): Term;
    finally(handler: any): any;
    catch(reject: any): any;
    error(reject: any): any;
    then(resolve: any, reject: any): any;
    rebalance(): Term;
    reconfigure(config: any): Term;
    wait(options: any): Term;
    status(): Term;
    config(): Term;
    toJsonString(): Term;
    toJSON: any;
    range(start: any, end?: any): Term;
    polygonSub(geometry: any): Term;
    polygon(): Term;
    point(longitude: any, latitude: any): Term;
    line(): Term;
    intersects(geometry: any): Term;
    includes(geometry: any): Term;
    getNearest(geometry: any, options: any): Term;
    _arity(args: any, num: any, method: any, term: any): void;
    _arityRange(args: any, min: any, max: any, method: any, term: any): void;
    _noPrefix(term: any, method: any): void;
    toString(): string;
    _translateArgs: any;
    _wrap(): Term;
    _fillArgs(args: any): Term;
    _setNestingLevel(nestingLevel: any): void;
    _setArrayLimit(arrayLimit: any): void;
    _fastArity(len: any, num: any): boolean;
    _fastArityRange(len: any, min: any, max: any): boolean;
}

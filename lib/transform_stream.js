var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var stream_1 = require('stream');
// Experimental, but should work fine.
var TransformStream = (function (_super) {
    __extends(TransformStream, _super);
    function TransformStream(table, options, connection) {
        _super.call(this);
        this._table = table;
        this._r = table._r;
        this._options = options;
        this._cache = [];
        this._pendingCallback = null;
        this._ended = false;
        this._inserting = false;
        this._delayed = false;
        this._connection = connection;
        this._highWaterMark = options.highWaterMark || 100;
        this._insertOptions = {};
        this._insertOptions.durability = options.durability || 'hard';
        this._insertOptions.conflict = options.conflict || 'error';
        this._insertOptions.returnChanges = options.returnChanges || true;
        // Internal option to run some tests
        if (options.debug === true) {
            this._sequence = [];
        }
        stream_1.Transform.call(this, {
            objectMode: true,
            highWaterMark: this._highWaterMark
        });
    }
    TransformStream.prototype._flush = function (done) {
        this._ended = true;
        if ((this._cache.length === 0) && (this._inserting === false)) {
            done();
        }
        else {
            if (this._inserting === false) {
                this._flushCallback = done;
                this._insert();
            }
            else {
                this._flushCallback = done;
            }
        }
    };
    TransformStream.prototype._insert = function () {
        var _this = this;
        var self = this;
        this._inserting = true;
        var cache = this._cache;
        this._cache = [];
        if (Array.isArray(this._sequence)) {
            this._sequence.push(cache.length);
        }
        var pendingCallback = this._pendingCallback;
        this._pendingCallback = null;
        if (typeof pendingCallback === 'function') {
            pendingCallback();
        }
        var query = this._table.insert(cache, this._insertOptions);
        if (this._options.format === 'primaryKey') {
            query = query.do(function (result) { return _this._r.branch(result('errors').eq(0), _this._table.config()('primary_key').do(function (primaryKey) { return result('changes')('new_val')(primaryKey); }), result(_this._r.error(result('errors').coerceTo('STRING').add(' errors returned. First error:\n').add(result('first_error'))))); });
        }
        query.run(this._connection).then(function (result) {
            _this._inserting = false;
            if (_this._options.format === 'primaryKey') {
                for (var i = 0; i < result.length; i++) {
                    _this.push(result[i]);
                }
            }
            else {
                if (result.errors > 0) {
                    _this._inserting = false;
                    _this.emit('error', new Error('Failed to insert some documents:' + JSON.stringify(result, null, 2)));
                }
                else {
                    if (_this._insertOptions.returnChanges === true) {
                        for (var i = 0; i < result.changes.length; i++) {
                            _this.push(result.changes[i].new_val);
                        }
                    }
                }
            }
            pendingCallback = _this._pendingCallback;
            _this._pendingCallback = null;
            if (typeof pendingCallback === 'function') {
                // Mean that we can buffer more
                pendingCallback();
            }
            else if (_this._ended !== true) {
                if (((((_this._writableState.lastBufferedRequest === null) ||
                    _this._writableState.lastBufferedRequest.chunk === _this._cache[_this._cache.length - 1])))
                    && (_this._cache.length > 0)) {
                    _this._insert();
                }
            }
            else if (_this._ended === true) {
                if (_this._cache.length > 0) {
                    _this._insert();
                }
                else {
                    if (typeof _this._flushCallback === 'function') {
                        _this._flushCallback();
                    }
                    _this.push(null);
                }
            }
        }).error(function (error) {
            _this._inserting = false;
            _this.emit('error', error);
        });
    };
    TransformStream.prototype._next = function (value, encoding, done) {
        var _this = this;
        if ((this._writableState.lastBufferedRequest != null) && (this._writableState.lastBufferedRequest.chunk !== value)) {
            // There's more data to buffer
            if (this._cache.length < this._highWaterMark) {
                this._delayed = false;
                // Call done now, and more data will be put in the cache
                done();
            }
            else {
                if (this._inserting === false) {
                    if (this._delayed === true) {
                        // We have to flush
                        this._delayed = false;
                        this._insert();
                        // Fill the buffer while we are inserting data
                        done();
                    }
                    else {
                        var self = this;
                        this._delayed = true;
                        setImmediate(function () {
                            _this._next(value, encoding, done);
                        });
                    }
                }
                else {
                    // to call when we are dong inserting to keep buffering
                    this._pendingCallback = done;
                }
            }
        }
        else {
            if (this._inserting === false) {
                if (this._delayed === true) {
                    this._delayed = false;
                    // to call when we are dong inserting to maybe flag the end
                    this._insert();
                    // We can call done now, because we have _flush to close the stream
                    done();
                }
                else {
                    var self = this;
                    this._delayed = true;
                    setImmediate(function () {
                        _this._next(value, encoding, done);
                    });
                }
            }
            else {
                this._delayed = false;
                // There is nothing left in the internal buffer
                // But something is already inserting stuff.
                if (this._cache.length < this._highWaterMark - 1) {
                    // Call done, to attempt to buffer more
                    // This may trigger _flush
                    //this._pendingCallback = done;
                    done();
                }
                else {
                    this._pendingCallback = done;
                }
            }
        }
    };
    TransformStream.prototype._transform = function (value, encoding, done) {
        this._cache.push(value);
        this._next(value, encoding, done);
    };
    return TransformStream;
})(stream_1.Transform);
exports.TransformStream = TransformStream;
;
// Everytime we want to insert but do not have a full buffer,
// we recurse with setImmediate to give a chance to the input
// stream to push a few more elements
//# sourceMappingURL=data:application/json;base64,